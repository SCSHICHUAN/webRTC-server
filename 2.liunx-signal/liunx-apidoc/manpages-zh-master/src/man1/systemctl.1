'\" t
.TH "SYSTEMCTL" "1" "" "systemd 231" "systemctl"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemctl \- 控制 systemd 系统与服务管理器
.SH "SYNOPSIS"
.HP \w'\fBsystemctl\fR\ 'u
\fBsystemctl\fR [OPTIONS...] COMMAND [NAME...]
.SH "描述"
.PP
\fBsystemctl\fR
可用于检查和控制
\fBsystemd\fR(1)
系统与服务管理器的状态。
.SH "选项"
.PP
能够识别的命令行选项如下：
.PP
\fB\-t\fR, \fB\-\-type=\fR
.RS 4
参数必须是一个 逗号分隔的单元类型列表(例如"service,socket")。
.sp
在列出单元时，如果使用了此选项， 那么表示只列出指定类型的单元， 否则将列出所有类型的单元。
.sp
此外，作为特例，使用
\fB\-\-type=help\fR
表示在列出所有可用的单元类型之后退出。
.RE
.PP
\fB\-\-state=\fR
.RS 4
参数必须是一个逗号分隔的单元状态列表(只有 LOAD, ACTIVE, SUB 三大类)。 在列出单元时，如果使用了此选项，那么表示只列出处于指定状态的单元， 否则将列出所有状态的单元。 例如，使用
\fB\-\-state=failed\fR
表示只列出处于失败(failed)状态的单元。
.sp
此外，作为特例，使用
\fB\-\-state=help\fR
表示在列出所有可用的单元状态之后退出。
.RE
.PP
\fB\-p\fR, \fB\-\-property=\fR
.RS 4
参数必须是一个逗号分隔的属性名称列表(例如"MainPID,LogLevel")， 表示在使用
\fBshow\fR
命令显示属性时， 仅显示参数中列出的属性。 如果未指定此选项，那么将显示全部属性。 如果多次指定此选项， 那么相当于将这些选项的参数用逗号连接起来。
.sp
不带参数的
\fBsystemctl\ \&show\fR
命令 将会显示管理器(systemd)自身的属性(参见
\fBsystemd-system.conf\fR(5)
手册)。
.sp
不同类型的单元拥有不同的属性集， 指定任意一个单元(即使并不存在)，都可以查看此类单元的所有属性。 类似的，即使指定了一个不存在的任务(job)，也能查看任务的所有属性。 每种单元能够拥有的属性集分散在
\fBsystemd.unit\fR(5)
手册 以及此类单元专属的手册中，例如
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5)
等等。
.RE
.PP
\fB\-a\fR, \fB\-\-all\fR
.RS 4
在列出单元时，表示列出所有已加载的单元。 在使用
\fBshow\fR
命令显示属性时， 表示显示所有属性，而不管这些属性是否已被设置。
.sp
如果想要列出所有已安装的单元，请使用
\fBlist\-unit\-files\fR
命令。
.RE
.PP
\fB\-r\fR, \fB\-\-recursive\fR
.RS 4
在列出单元时， 同时也以
"容器名:单元名"
格式列出本地容器中的单元。
.RE
.PP
\fB\-\-reverse\fR
.RS 4
在使用
\fBlist\-dependencies\fR
命令时， 仅显示单元之间的反向依赖关系。 也就是仅显示
\fIWantedBy=\fR,
\fIRequiredBy=\fR,
\fIPartOf=\fR,
\fIBoundBy=\fR
系列(而不是
\fIWants=\fR
系列)的依赖关系。
.RE
.PP
\fB\-\-after\fR
.RS 4
在使用
\fBlist\-dependencies\fR
命令时， 仅显示在先后顺序上早于指定单元的那些单元， 也就是递归的列出
\fIAfter=\fR
中的单元。
.sp
注意，每个
\fIAfter=\fR
依赖都会自动生成一个对应的
\fIBefore=\fR
依赖。 单元之间的先后顺序既可以被显式的明确设定， 也可以由其他指令隐式的自动生成(例如
\fIWantedBy=\fR
或
\fIRequiresMountsFor=\fR)。 无论是隐式自动生成的先后顺序， 还是显式明确设定的先后顺序， 都会被
\fBlist\-dependencies\fR
命令显示出来。
.RE
.PP
\fB\-\-before\fR
.RS 4
在使用
\fBlist\-dependencies\fR
命令时， 仅显示在先后顺序上晚于指定单元的那些单元， 也就是递归的列出
\fIBefore=\fR
中的单元。
.RE
.PP
\fB\-l\fR, \fB\-\-full\fR
.RS 4
在
\fBstatus\fR,
\fBlist\-units\fR,
\fBlist\-jobs\fR,
\fBlist\-timers\fR
命令的输出中， 显示完整的单元名称、进程树项目、日志输出、单元描述， 也就是不省略或截断它们。
.RE
.PP
\fB\-\-value\fR
.RS 4
在使用
\fBshow\fR
命令显示属性时， 仅显示属性值，而不显示属性名及等号。
.RE
.PP
\fB\-\-show\-types\fR
.RS 4
在使用
\fBlist\-sockets\fR
命令列出套接字(socket)时，同时显示套接字的类型。
.RE
.PP
\fB\-\-job\-mode=\fR
.RS 4
在向任务队列中添加新任务(job)时，如何处理队列中已有的任务。 可设为
"fail",
"replace",
"replace\-irreversibly",
"isolate",
"ignore\-dependencies",
"ignore\-requirements",
"flush"
之一。 仅在使用
\fBisolate\fR
命令时，默认值为
"isolate"
且不能更改， 对于其他命令，默认值皆为
"replace"
。
.sp
"fail"
表示当新任务与队列中已有的任务冲突时，该命令将失败。 所谓"冲突"的含义是：导致队列中已有的某个启动操作转变为停止操作，或者相反。
.sp
"replace"
表示将队列中冲突的任务替换为新任务。
.sp
"replace\-irreversibly"
与
"replace"
类似， 不同之处在于将新任务同时标记为"不可撤销"， 也就是即使未来与其他新添加的任务发生冲突也不会被撤消。 注意，这个"不可撤销"的任务， 仍然可以使用
\fBcancel\fR
命令显式的撤消。
.sp
"isolate"
仅用于启动操作，表示在该单元启动之后，所有其他单元都会被停止。 当使用
\fBisolate\fR
命令的时候， 这是默认值，且不能更改。
.sp
"flush"
表示撤消队列中已有的全部任务，然后加入新任务。
.sp
"ignore\-dependencies"
表示忽略新任务的所有依赖关系(包括先后顺序依赖)， 立即执行请求的操作。 如果成功， 那么所有被依赖的单元及先后顺序都将被忽略。 仅用于调试目的，切勿用于常规目的。
.sp
"ignore\-requirements"
类似于
"ignore\-dependencies"
， 表示仅忽略必需的依赖(但依然遵守单元之间的先后顺序)。
.RE
.PP
\fB\-\-fail\fR
.RS 4
这是
\fB\-\-job\-mode=fail\fR
的快捷方式。
.sp
当与
\fBkill\fR
命令一起使用时， 表示如果没有任何单元被杀死，那么将会导致报错。
.RE
.PP
\fB\-i\fR, \fB\-\-ignore\-inhibitors\fR
.RS 4
当关闭或休眠系统时，忽略 inhibitor 锁。 应用程序可以利用 inhibitor 锁防止某些重要操作(例如刻录光盘)被关机或休眠打断。 任何用户都可以获取 inhibitor 锁， 但是只有特权用户可以撤消或者忽略它。 正常情况下， 关机与休眠动作会因为 inhibitor 锁的存在而失败(无论该动作是否由特权用户发起)， 同时所有已激活的 inhibitor 锁也都会被显示出来。 但如果使用了此选项， 那么 inhibitor 锁将被忽略，关机或休眠将会照常执行， 同时也不再显示这些已激活的锁。
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
安静模式，也就是禁止输出任何信息到标准输出。 注意：(1)这并不适用于输出信息是唯一结果的命令(例如
\fBshow\fR)； (2)显示在标准错误上的出错信息永远不会被屏蔽。
.RE
.PP
\fB\-\-no\-block\fR
.RS 4
默认为阻塞模式，也就是任务经过校验、排入任务队列之后，
\fBsystemctl\fR
必须一直等到单元启动/停止完成才算执行结束。 使用此选项之后，将变为无阻塞模式，也就是任务排入队列之后， 即算
\fBsystemctl\fR
执行结束(不必等待单元启动/停止完成)。
.RE
.PP
\fB\-\-user\fR
.RS 4
与当前调用用户的用户服务管理器(systemd 用户实例)通信， 而不是默认的系统服务管理器(systemd 系统实例)。
.RE
.PP
\fB\-\-system\fR
.RS 4
与系统服务管理器(systemd 系统实例)通信， 这是默认值。
.RE
.PP
\fB\-\-no\-wall\fR
.RS 4
在执行 halt, poweroff, reboot 动作前，不发送警告消息。
.RE
.PP
\fB\-\-global\fR
.RS 4
表示在全局用户单元目录(通常是
/etc/systemd/user/)上操作， 从而全局的操作一个用户单元，这会影响到所有未来登入的用户。
.RE
.PP
\fB\-\-no\-reload\fR
.RS 4
与
\fBenable\fR,
\fBdisable\fR,
\fBedit\fR
命令连用， 表示在完成操作之后不重新加载 systemd 守护进程的配置(默认会自动重新加载)， 相当于不自动执行
\fBdaemon\-reload\fR
命令。
.RE
.PP
\fB\-\-no\-ask\-password\fR
.RS 4
与
\fBstart\fR
及其相关命令(reload, restart, try\-restart, reload\-or\-restart, reload\-or\-try\-restart, isolate)连用， 表示不询问密码。 单元在启动时可能要求输入密码(例如用于解密证书或挂载加密文件系统)。 当未使用此选项时，
\fBsystemctl\fR
将会在终端上向用户询问所需的密码。 如果使用了此选项， 那么必须通过其他方法提供密码(例如通过密码代理程序)， 否则单元可能会启动失败。 使用此选项还会导致在验证用户身份时， 不能使用从终端输入密码的方式。
.RE
.PP
\fB\-\-kill\-who=\fR
.RS 4
与
\fBkill\fR
命令连用， 表示向哪个进程发送信号(\fB\-\-signal=\fR)。 可设为
\fBmain\fR(仅杀死主进程) 或
\fBcontrol\fR(仅杀死控制进程) 或
\fBall\fR(杀死全部进程，这是默认值)。 所谓"主进程"是指定义了单元生存期的进程。 所谓"控制进程"是指用于改变单元状态的进程。 例如，所有
\fIExecStartPre=\fR,
\fIExecStop=\fR,
\fIExecReload=\fR
启动的进程都是控制进程。 注意，对于一个单元来说，同一时刻只能存在一个控制进程， 因为同一时刻只能存在一个状态变化的动作。 对于
\fIType=forking\fR
类型的服务来说，
\fIExecStart=\fR
启动的初始进程就是一个控制进程， 而此进程随后派生出来作为守护进程运行的那个进程， 则是该单元的主进程(如果它可以被检测到的话)。 但对于其他类型的服务来说，
\fIExecStart=\fR
启动的初始进程反而始终是该服务的主进程。 一个服务单元可以包含以下进程： 零个或一个主进程，零个或一个控制进程， 任意数量(可以是零个)的其他进程。 注意，不是所有类型的单元都含有上述三种进程。 例如，对于 mount 类型的单元来说， 就仅有控制进程(/usr/bin/mount
与
/usr/bin/umount)， 而没有主进程。 默认值是
\fBall\fR
.RE
.PP
\fB\-s\fR, \fB\-\-signal=\fR
.RS 4
与
\fBkill\fR
命令连用， 表示向目标进程发送哪个信号。 必须是
\fBSIGTERM\fR,
\fBSIGINT\fR,
\fBSIGSTOP\fR
之类众所周知的信号。 默认值为
\fBSIGTERM\fR
 。
        .RE
.PP
\fB\-f\fR, \fB\-\-force\fR
.RS 4
当与
\fBenable\fR
命令连用时， 表示覆盖所有现存的同名符号链接。
.sp
当与
\fBedit\fR
命令连用时， 表示创建所有尚不存在的指定单元。
.sp
当与
\fBhalt\fR,
\fBpoweroff\fR,
\fBreboot\fR,
\fBkexec\fR
命令连用时，表示跳过单元的正常停止步骤，强制直接执行关机操作。 如果仅使用此选项一次，那么所有进程都将被强制杀死，并且所有文件系统都将被卸载(或以只读模式重新挂载)。 这可以算是一种野蛮但还算相对比较安全的快速关机或重启的方法。 如果连续两次使用此选项，那么将既不杀死进程，也不卸载文件系统， 而是直接强制关机或重启(但
\fBkexec\fR
除外)。 警告：连续两次使用
\fB\-\-force\fR
选项将会导致数据丢失、文件系统不一致等不良后果。 注意，如果连续两次使用
\fB\-\-force\fR
选项，那么所有操作都将由
\fBsystemctl\fR
自己直接执行，而不会与 systemd 进程通信。 这意味着，即使 systemd 进程已经僵死或者崩溃，连续两次使用
\fB\-\-force\fR
选项所指定的操作依然能够执行成功。
.RE
.PP
\fB\-\-message=\fR
.RS 4
当与
\fBhalt\fR,
\fBpoweroff\fR,
\fBreboot\fR,
\fBkexec\fR
命令一起使用时， 用于设置一个解释为什么进行该操作的字符串。 此字符串将与默认的关机消息一起记录到日志中。
.RE
.PP
\fB\-\-now\fR
.RS 4
当与
\fBenable\fR
命令连用时， 表示同时还要启动该单元。 当与
\fBdisable\fR
或
\fBmask\fR
命令连用时， 表示同时还要停止该单元。
.RE
.PP
\fB\-\-root=\fR
.RS 4
与
\fBenable\fR/\fBdisable\fR/\fBis\-enabled\fR
等相关命令连用，用于设置寻找单元文件时的根目录。
.RE
.PP
\fB\-\-runtime\fR
.RS 4
当与
\fBenable\fR,
\fBdisable\fR,
\fBedit\fR
等相关命令连用时， 表示仅作临时变更，从而确保这些变更会在重启后丢失。 这意味着所做的变更将会保存在
/run
目录下(立即生效但重启后该目录的内容将全部丢失)， 而不是保存在
/etc
目录下。
.sp
类似的，当与
\fBset\-property\fR
命令连用时， 所做的变更亦是临时的， 这些变更在重启后亦会丢失。
.RE
.PP
\fB\-\-preset\-mode=\fR
.RS 4
与
\fBpreset\fR
或
\fBpreset\-all\fR
命令连用，可设为下列值之一：
"full"(默认值) 表示完全按照预设规则启用与停用各单元。
"enable\-only"
表示仅按照预设规则启用各单元。
"disable\-only"
表示仅按照预设规则停用各单元。
.RE
.PP
\fB\-n\fR, \fB\-\-lines=\fR
.RS 4
与
\fBstatus\fR
命令连用， 控制日志的显示行数(从最新的一行开始计算)。 必须设为一个正整数，默认值是"10"。
.RE
.PP
\fB\-o\fR, \fB\-\-output=\fR
.RS 4
与
\fBstatus\fR
命令连用， 控制日志的显示格式。 详见
\fBjournalctl\fR(1)
手册。默认值为
"short"
 。
        .RE
.PP
\fB\-\-firmware\-setup\fR
.RS 4
与
\fBreboot\fR
命令连用， 要求系统主板的UEFI固件重启到安装模式。 仅支持某些以UEFI模式启动的主板。
.RE
.PP
\fB\-\-plain\fR
.RS 4
与
\fBlist\-dependencies\fR,
\fBlist\-units\fR,
\fBlist\-machines\fR
命令连用， 将输出从默认的树形变为列表型。
.RE
.PP
\fB\-H\fR, \fB\-\-host=\fR
.RS 4
操作指定的远程主机。可以仅指定一个主机名(hostname)， 也可以使用
"username@hostname"
格式。 hostname 后面还可以加上容器名(以冒号分隔)， 也就是形如
"hostname:container"
的格式， 以表示直接连接到指定主机的指定容器内。 操作将通过SSH协议进行，以确保安全。 可以通过
\fBmachinectl \-H \fR\fB\fIHOST\fR\fR
命令列出远程主机上的所有容器名称。
.RE
.PP
\fB\-M\fR, \fB\-\-machine=\fR
.RS 4
在本地容器内执行操作。 必须明确指定容器的名称。
.RE
.PP
\fB\-\-no\-pager\fR
.RS 4
不将程序的输出内容管道(pipe)给分页程序。
.RE
.PP
\fB\-\-no\-legend\fR
.RS 4
不输出列标题， 也就是不在输出列表的头部和尾部显示字段的名称。
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
显示简短的帮助信息并退出。
.RE
.PP
\fB\-\-version\fR
.RS 4
显示简短的版本信息并退出。
.RE
.SH "命令"
.PP
模式(\fIPATTERN\fR)参数的语法与文件名匹配语法类似：用"*"匹配任意数量的字符，用"?"匹配单个字符，用"[]"匹配字符范围。 如果给出了模式(\fIPATTERN\fR)参数，那么表示该命令仅作用于单元名称与至少一个模式相匹配的单元。
.SS "单元命令"
.PP
\fBlist\-units \fR\fB[\fIPATTERN\fR\&.\&.\&.]\fR
.RS 4
列出
\fBsystemd\fR
已加载的单元。 除非明确使用
\fB\-\-all\fR
选项列出全部单元(包括：直接引用的单元、出于依赖关系而被引用的单元、活动的单元、失败的单元)， 否则默认仅列出：活动的单元、失败的单元、正处于任务队列中的单元。 如果给出了模式(\fIPATTERN\fR)参数，那么表示该命令仅作用于单元名称与至少一个模式相匹配的单元。 还可以通过
\fB\-\-type=\fR
与
\fB\-\-state=\fR
选项过滤要列出的单元。
.sp
这是默认命令。
.RE
.PP
\fBlist\-sockets \fR\fB[\fIPATTERN\fR\&.\&.\&.]\fR
.RS 4
列出已加载的套接字(socket)单元，并按照监听地址排序。 如果给出了模式(\fIPATTERN\fR)参数，那么表示该命令仅作用于单元名称与至少一个模式相匹配的单元。 该命令的输出大致像下面这样子：
.sp
.if n \{\
.RS 4
.\}
.nf
LISTEN           UNIT                        ACTIVATES
/dev/initctl     systemd\-initctl\&.socket      systemd\-initctl\&.service
\&.\&.\&.
[::]:22          sshd\&.socket                 sshd\&.service
kobject\-uevent 1 systemd\-udevd\-kernel\&.socket systemd\-udevd\&.service

5 sockets listed\&.
.fi
.if n \{\
.RE
.\}
.sp
注意：因为监听地址中有可能包含空格， 所以不适合使用程序分析该命令的输出。
.sp
参见
\fB\-\-show\-types\fR,
\fB\-\-all\fR,
\fB\-\-state=\fR
选项。
.RE
.PP
\fBlist\-timers \fR\fB[\fIPATTERN\fR\&.\&.\&.]\fR
.RS 4
列出已加载的定时器(timer)单元，并按照下次执行的时间点排序。 如果给出了模式(\fIPATTERN\fR)参数，那么表示该命令仅作用于单元名称与至少一个模式相匹配的单元。
.sp
参见
\fB\-\-all\fR
与
\fB\-\-state=\fR
选项。
.RE
.PP
\fBstart \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
启动(activate)指定的已加载单元(无法启动未加载的单元)。
.sp
如果某个单元未被启动，又没有处于失败(failed)状态， 那么通常是因为该单元没有被加载，所以根本没有被模式匹配到。 此外，对于从模板实例化而来的单元，因为 systemd 会在其尚未启动前忽略它们， 又因为模式(\fIPATTERN\fR)参数仅能匹配已加载单元的"主名称"(不含单元的"别名")， 所以，在这个命令中使用包含通配符的模式并没有多少实际意义。
.RE
.PP
\fBstop \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
停止(deactivate)指定的单元
.RE
.PP
\fBreload \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
要求指定的单元重新加载它们的配置。 注意，这里所说的"配置"是服务进程专属的配置(例如
httpd\&.conf
之类)， 而不是 systemd 的"单元文件"。 如果你想重新加载 systemd 的"单元文件"， 那么应该使用
\fBdaemon\-reload\fR
命令。 以 Apache 为例， 该命令会导致重新加载
httpd\&.conf
文件， 而不是
apache\&.service
文件。
.sp
不要将此命令与
\fBdaemon\-reload\fR
命令混淆。
.RE
.PP
\fBrestart \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
重新启动指定的单元。 若指定的单元尚未启动，则启动它们。
.RE
.PP
\fBtry\-restart \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
重新启动指定的已启动单元。 注意，若指定的单元尚未启动，则不做任何操作。
.RE
.PP
\fBreload\-or\-restart \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
首先尝试重新加载指定单元的进程专属配置， 对于那些加载失败的单元，再继续尝试重新启动它们。 若指定的单元尚未启动，则启动它们。
.RE
.PP
\fBtry\-reload\-or\-restart \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
首先尝试重新加载指定单元的进程专属配置， 对于那些加载失败的单元，再继续尝试重新启动它们。 注意，若指定的单元尚未启动，则不做任何操作。
.RE
.PP
\fBisolate \fR\fB\fINAME\fR\fR
.RS 4
启动指定的单元以及所有依赖单元，同时停止所有其他单元。 如果没有给出单元的后缀名， 那么相当于以
"\&.target"
作为后缀名。
.sp
这类似于传统上切换SysV运行级的概念。 该命令会立即停止所有在新目标单元中不需要的进程， 这其中可能包括当前正在运行的图形环境以及正在使用的终端。
.sp
注意，该命令仅可用于
\fBAllowIsolate=yes\fR
的单元。参见
\fBsystemd.unit\fR(5)
手册。
.RE
.PP
\fBkill \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
向指定单元的
\fB\-\-kill\-who=\fR
进程发送
\fB\-\-signal=\fR
信号。
.RE
.PP
\fBis\-active \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
检查指定的单元中，是否有处于活动(active)状态的单元。 如果存在至少一个处于活动(active)状态的单元，那么返回"0"值，否则返回非零值。 除非同时使用了
\fB\-\-quiet\fR
选项， 否则，此命令还会在标准输出上显示单元的状态。
.RE
.PP
\fBis\-failed \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
检查指定的单元中，是否有处于失败(failed)状态的单元。 如果存在至少一个处于失败(failed)状态的单元，那么返回"0"值，否则返回非零值。 除非同时使用了
\fB\-\-quiet\fR
选项， 否则，此命令还会在标准输出上显示单元的状态。
.RE
.PP
\fBstatus\fR [\fIPATTERN\fR\&.\&.\&.|\fIPID\fR\&.\&.\&.]
.RS 4
如果指定了单元，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。 如果指定了PID，那么显示指定PID所属单元的运行时状态信息，以及这些单元最近的日志数据。 如果未指定任何单元或PID，那么显示整个系统的状态信息， 此时若与
\fB\-\-all\fR
连用， 则同时显示所有已加载单元(可以用
\fB\-t\fR
限定单元类型)的状态信息。
.sp
此命令用于输出人类易读的结果，不要将其用于程序分析(应该使用
\fBshow\fR
命令)。 除非使用了
\fB\-\-lines\fR
与
\fB\-\-full\fR
选项， 否则默认只输出10行日志， 并且超长的部分会被省略号截断。此外，
\fBjournalctl \-\-unit=\fR\fB\fINAME\fR\fR
或
\fBjournalctl \-\-user\-unit=\fR\fB\fINAME\fR\fR
也会对超长的消息使用类似的省略号截断。
.RE
.PP
\fBshow\fR [\fIPATTERN\fR\&.\&.\&.|\fIJOB\fR\&.\&.\&.]
.RS 4
以"属性=值"的格式显示指定单元或任务的所有属性。 单元用其名称表示，而任务则用其id表示。 如果没有指定任何单元或任务， 那么显示管理器(systemd)自身的属性。 除非使用了
\fB\-\-all\fR
选项， 否则默认不显示属性值为空的属性。 可以使用
\fB\-\-property=\fR
选项限定仅显示特定的属性。 此命令的输出适合用于程序分析， 而不适合被人类阅读(应该使用
\fBstatus\fR
命令)。
.RE
.PP
\fBcat \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.\fR
.RS 4
显示指定单元的单元文件内容。 在显示每个单元文件的内容之前， 会额外显示一行单元文件的绝对路径。
.RE
.PP
\fBset\-property \fR\fB\fINAME\fR\fR\fB \fR\fB\fIASSIGNMENT\fR\fR\fB\&.\&.\&.\fR
.RS 4
在运行时修改单元的属性值。 主要用于修改单元的资源控制属性值而无需直接修改单元文件。 并非所有属性都可以在运行时被修改， 但大多数资源控制属性(参见
\fBsystemd.resource-control\fR(5))可以。 所作修改会立即生效，并永久保存在磁盘上，以确保永远有效。 但是如果使用了
\fB\-\-runtime\fR
选项， 那么此修改仅临时有效，下次重启此单元后，将会恢复到原有的设置。 设置属性的语法与单元文件中的写法相同。
.sp
例如：
\fBsystemctl set\-property foobar\&.service CPUShares=777\fR
.sp
注意，此命令可以同时修改多个属性值， 只需依次将各个属性用空格分隔即可。
.sp
与单元文件中的规则相同， 设为空表示清空当前已存在的列表。
.RE
.PP
\fBhelp \fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.|\fR\fB\fIPID\fR\fR\fB\&.\&.\&.\fR
.RS 4
显示指定单元的手册页(若存在)。 指定PID表示显示该进程所属单元的手册页(若存在)。
.RE
.PP
\fBreset\-failed [\fR\fB\fIPATTERN\fR\fR\fB\&.\&.\&.]\fR
.RS 4
重置指定单元的失败(failed)状态。 如果未指定任何单元，则重置所有单元的失败(failed)状态。 当某个单元因为某种原因操作失败(例如退出状态码不为零或进程被强制杀死或启动超时)， 将会自动进入失败(failed)状态， 退出状态码与导致故障的原因 将被记录到日志中以方便日后排查。
.RE
.PP
\fBlist\-dependencies\fR [\fINAME\fR]
.RS 4
显示单元的依赖关系。 也就是显示由
\fIRequires=\fR,
\fIRequisite=\fR,
\fIConsistsOf=\fR,
\fIWants=\fR,
\fIBindsTo=\fR
所形成的依赖关系。 如果没有明确指定单元的名称， 那么表示显示
default\&.target
的依赖关系树。
.sp
默认情况下，仅以递归方式显示 target 单元的依赖关系树，而对于其他类型的单元，仅显示一层依赖关系(不递归)。 但如果使用了
\fB\-\-all\fR
选项， 那么将对所有类型的单元都强制递归的显示完整的依赖关系树。
.sp
还可以使用
\fB\-\-reverse\fR,
\fB\-\-after\fR,
\fB\-\-before\fR
选项指定仅显示特定类型的依赖关系。
.RE
.SS "单元文件命令"
.PP
\fBlist\-unit\-files \fR\fB[\fIPATTERN\&.\&.\&.\fR]\fR
.RS 4
列出所有已安装的单元文件及其启用状态(相当于同时使用了
\fBis\-enabled\fR
命令)。 如果给出了模式(\fIPATTERN\fR)参数， 那么表示该命令仅作用于单元文件名称与至少一个模式相匹配的单元(仅匹配文件名，不匹配路径)。
.RE
.PP
\fBenable \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR, \fBenable \fR\fB\fIPATH\fR\fR\fB\&.\&.\&.\fR
.RS 4
启用指定的单元或单元实例(多数时候相当于将这些单元设为"开机时自动启动"或"插入某个硬件时自动启动")。 这将会按照单元文件中
"[Install]"
小节的指示， 在例如
/etc/systemd/system/multi\-user\&.target\&.wants/
这样的目录中，创建指向单元文件自身的软链接。 创建完软连接之后，systemd 将会自动重新加载自身的配置(相当于执行
\fBdaemon\-reload\fR
命令)，以确保所做的变更立即生效。 注意，除非同时使用了
\fB\-\-now\fR
选项(相当于同时执行
\fBstart\fR
命令)， 否则启用一个单元\fI并不会\fR导致该单元被启动。 注意，对于形如
foo@bar\&.service
这样的单元实例， 软链接自身的文件名是实例化之后的单元名称， 但是软连接所指向的目标文件则是该单元的模板文件。
.sp
如果此命令的参数是一个有效的单元名称(\fINAME\fR)，那么将自动搜索所有单元目录。 如果此命令的参数是一个单元文件的绝对路径(\fIPATH\fR)，那么将直接使用指定的单元文件。 如果参数是一个位于标准单元目录之外的单元文件， 那么将会在标准单元目录中额外创建一个指向此单元文件的软连接， 以确保该单元文件能够被
\fBstart\fR
之类的命令找到。
.sp
除非使用了
\fB\-\-quiet\fR
选项， 否则此命令还会显示对文件系统所执行的操作(Created symlink \&.\&.\&.)。
.sp
此命令是维护
\&.{wants,requires}/
目录与单元别名的首选方法。 注意，此命令仅会按照单元文件中
"[Install]"
小节预设的名称创建软链接。 另一方面，系统管理员亦可手动创建所需的软链接， 特别是在需要创建不同于默认软链接名称的时候。 不过需要注意的是，系统管理员必须在创建完软连接之后手动执行
\fBdaemon\-reload\fR
命令， 以确保所做的变更立即生效。
.sp
不要将此命令与
\fBstart\fR
命令混淆，它们是相互独立的命令： 可以启动一个尚未启用的单元，也可以启用一个尚未启动的单元。
\fBenable\fR
命令只是设置了单元的启动钩子(通过创建软链接)， 例如在系统启动时或者某个硬件插入时，自动启动某个单元。 而
\fBstart\fR
命令则是具体执行单元的启动操作， 例如对于服务单元来说就是启动守护进程，而对于套接字单元来说则是绑定套接字，等等。
.sp
若与
\fB\-\-user\fR
选项连用，则表示变更仅作用于用户实例，否则默认作用于系统实例(相当于使用
\fB\-\-system\fR
选项)。 若与
\fB\-\-runtime\fR
选项连用，则表示仅作临时性变更(重启后所有变更都将丢失)，否则默认为永久性变更。 若与
\fB\-\-global\fR
选项连用，则表示变更作用于所有用户(在全局用户单元目录上操作)，否则默认仅作用于当前用户(在私有用户单元目录上操作)。 注意，当与
\fB\-\-runtime\fR
选项连用时，systemd 守护进程不会重新加载自身的配置。
.sp
不可将此命令应用于已被
\fBmask\fR
命令屏蔽的单元，否则将会导致错误。
.RE
.PP
\fBdisable \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
停用指定的单元或单元实例(多数时候相当于撤销这些单元的"开机时自动启动"以及"插入某个硬件时自动启动")。 这将会从单元目录中删除所有指向单元自身及所有支持单元的软链接。 这相当于撤销
\fBenable\fR
或
\fBlink\fR
命令所做的操作。 注意，此命令会删除\fI所有\fR指向单元自身及所有支持单元的软链接， 包括手动创建的软连接以及通过
\fBenable\fR
与
\fBlink\fR
命令创建的软连接。 注意，虽然
\fBdisable\fR
与
\fBenable\fR
是一对相反的命令，但是它们的效果并不一定总是完全对称的。 因为
\fBdisable\fR
删除的软连接数量有可能比上一次
\fBenable\fR
命令创建的软连接数量更多。
.sp
此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.sp
除了停用参数中明确指定的单元之外，那些在被停用单元
"[Install]"
小节的
\fIAlso=\fR
选项中列出的所有单元，也同样会被停用。 也就是说，这个停用动作是沿着
\fIAlso=\fR
选项不断传递的。
.sp
删除完软连接之后， systemd 将会自动重新加载自身的配置(相当于执行
\fBdaemon\-reload\fR
命令)，以确保所做的变更立即生效。 注意，除非同时使用了
\fB\-\-now\fR
选项(相当于同时执行
\fBstop\fR
命令)， 否则停用一个单元\fI并不会\fR导致该单元被停止。
.sp
除非使用了
\fB\-\-quiet\fR
选项， 否则此命令还会显示对文件系统所执行的操作(Removed symlink \&.\&.\&.)。
.sp
有关
\fB\-\-system\fR,
\fB\-\-user\fR,
\fB\-\-runtime\fR,
\fB\-\-global\fR
选项的影响，参见上面对
\fBenable\fR
命令的解释。
.RE
.PP
\fBreenable \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
重新启用指定的单元或单元实例。 这相当于先使用
\fBdisable\fR
命令之后再使用
\fBenable\fR
命令。 通常用于按照单元文件中
"[Install]"
小节的指示重置软链接名称。 此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.RE
.PP
\fBpreset \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
按照预设文件(*\&.preset)的指示，重置指定单元的启用(enable)/停用(disable)状态。 其效果等价于按照预设规则，对列出的单元依次使用
\fBdisable\fR
或
\fBenable\fR
命令。
.sp
可以使用
\fB\-\-preset\-mode=\fR
选项控制如何参照预设文件： 既启用又停用、仅启用、仅停用
.sp
如果指定单元的
"[Install]"
小节不包含必要的启用信息， 那么此命令将会悄无声息的忽略该单元。
.sp
有关预设文件的更多说明，详见
\fBsystemd.preset\fR(5)
手册与
\m[blue]\fBPreset\fR\m[]\&\s-2\u[1]\d\s+2
文档。
.RE
.PP
\fBpreset\-all\fR
.RS 4
按照预设文件(*\&.preset)的指示， 重置全部单元的启用(enable)/停用(disable)状态(参见上文)。
.sp
可以使用
\fB\-\-preset\-mode=\fR
选项控制如何参照预设文件： 既启用又停用、仅启用、仅停用
.RE
.PP
\fBis\-enabled \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
检查是否有至少一个指定的单元或单元实例已经被启用。如果有，那么返回"0"，否则返回非零。 除非使用了
\fB\-\-quiet\fR
选项，否则此命令还会显示指定的单元或单元实例的当前启用状态：
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&is\-enabled 命令的输出
.TS
allbox tab(:);
lB lB lB.
T{
状态
T}:T{
含义
T}:T{
返回值
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
"enabled"
T}:T{
已经通过 /etc/systemd/system/*\&.{wants,requires}/ 目录下的软连接被永久启用
T}:T{
0
T}
T{
"enabled\-runtime"
T}:T{
已经通过 /run/systemd/system/*\&.{wants,requires}/ 目录下的软连接被临时启用
T}:T{
0
T}
T{
"linked"
T}:T{
虽然单元文件本身不在标准单元目录中，但是指向此单元文件的一个或多个软连接已经存在于 /etc/systemd/system/ 永久目录中
T}:T{
> 0
T}
T{
"linked\-runtime"
T}:T{
虽然单元文件本身不在标准单元目录中，但是指向此单元文件的一个或多个软连接已经存在于 /run/systemd/system/ 临时目录中
T}:T{
> 0
T}
T{
"masked"
T}:T{
已经被 /etc/systemd/system/ 目录永久屏蔽(软连接指向 /dev/null 文件)，因此 \fBstart\fR 操作会失败
T}:T{
> 0
T}
T{
"masked\-runtime"
T}:T{
已经被 /run/systemd/systemd/ 目录临时屏蔽(软连接指向 /dev/null 文件)，因此 \fBstart\fR 操作会失败
T}:T{
> 0
T}
T{
"static"
T}:T{
尚未被启用，并且单元文件的 "[Install]" 小节中没有可用于 \fBenable\fR 命令的选项
T}:T{
0
T}
T{
"indirect"
T}:T{
尚未被启用，但是单元文件的 "[Install]" 小节中 \fIAlso=\fR 选项的值列表非空(也就是列表中的某些单元可能已被启用)
T}:T{
0
T}
T{
"disabled"
T}:T{
尚未被启用，但是单元文件的 "[Install]" 小节中存在可用于 \fBenable\fR 命令的选项
T}:T{
> 0
T}
T{
"generated"
T}:T{
单元文件是被单元生成器动态生成的(参见 \fBsystemd.generator\fR(7) 手册)。被生成的单元文件可能并未被直接启用，而是被单元生成器隐含的启用了。
T}:T{
0
T}
T{
"transient"
T}:T{
单元文件是被运行时API动态临时生成的。该临时单元可能并未被启用。
T}:T{
0
T}
T{
"bad"
T}:T{
单元文件不正确或者出现其他错误。 \fBis\-enabled\fR 不会返回此状态，而是会显示一条出错信息。 \fBlist\-unit\-files\fR 命令有可能会显示此单元。
T}:T{
> 0
T}
.TE
.sp 1
.RE
.PP
\fBmask \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
屏蔽指定的单元或单元实例。 也就是在单元目录中创建指向
/dev/null
的同名符号连接，从而在根本上确保无法启动这些单元。 这比
\fBdisable\fR
命令更彻底，可以通杀一切启动方法(包括手动启动)，所以应该谨慎使用该命令。 若与
\fB\-\-runtime\fR
选项连用，则表示仅作临时性屏蔽(重启后屏蔽将失效)，否则默认为永久性屏蔽。 除非使用了
\fB\-\-now\fR
选项(相当于同时执行
\fBstop\fR
命令)，否则仅屏蔽一个单元并不会导致该单元被停止。 此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.RE
.PP
\fBunmask \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
解除对指定单元或单元实例的屏蔽，这是
\fBmask\fR
命令的反动作。 也就是在单元目录中删除指向
/dev/null
的同名符号连接。 此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.RE
.PP
\fBlink \fR\fB\fIPATH\fR\fR\fB\&.\&.\&.\fR
.RS 4
将不在标准单元目录中的单元文件(通过软链接)连接到标准单元目录中去。
\fIPATH\fR
参数必须是单元文件的绝对路径。该命令的结果可以通过
\fBdisable\fR
命令撤消。 通过该命令，可以让一个不在标准单元目录中的单元文件，也可以像位于标准单元目录中的常规单元文件一样， 被
\fBstart\fR,
\fBstop\fR
\&.\&.\&. 等各种命令操作。
.RE
.PP
\fBrevert \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
将指定的单元恢复成初始版本。 这将会删除对指定单元的所有修改。 例如，对于
"foo\&.service"
单元来说， 将会删除所有
foo\&.service\&.d/
目录。 如果指定的单元在
/usr/lib/
目录中 还存在单元文件的初始版本，那么还会进一步删除
/etc/
与
/run/
目录中 所有用来覆盖初始单元文件的软连接与自定义单元文件。 如果指定的单元已经被屏蔽，那么将会被解除屏蔽。
.sp
从效果上看，该命令相当于撤销
\fBedit\fR,
\fBset\-property\fR,
\fBmask\fR
命令所做的操作， 并且将指定单元的配置恢复成软件包提供的初始值。
.RE
.PP
\fBadd\-wants \fR\fB\fITARGET\fR\fR\fB \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR, \fBadd\-requires \fR\fB\fITARGET\fR\fR\fB \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
将指定的单元或单元实例(\fINAME\fR) 作为
"Wants="
或
"Requires="
依赖， 添加到
\fITARGET\fR
单元中。
.sp
关于
\fB\-\-system\fR,
\fB\-\-user\fR,
\fB\-\-runtime\fR,
\fB\-\-global\fR
选项的影响， 参见前文对
\fBenable\fR
命令的解释。
.RE
.PP
\fBedit \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
调用文本编辑器(参见下面的"环境变量"小节)修改指定的单元或单元实例。
.sp
若使用了
\fB\-\-full\fR
选项，则表示使用新编辑的单元文件完全取代原始单元文件， 否则默认将新编辑的单元配置片段(位于
\&.d/
目录)附加到原始单元文件的末尾。
.sp
如果使用了
\fB\-\-force\fR
选项，并且某些指定的单元文件不存在， 那么将会强制打开一个新的空单元文件以供编辑。
.sp
注意，在编辑过程中，编辑器实际操作的只是临时文件， 仅在编辑器正常退出时，临时文件的内容才会被实际写入到目标文件中。
.sp
注意，如果在编辑器退出时，临时文件的内容为空， 则表示取消编辑动作(而不是写入一个空文件)。
.sp
编辑动作完成之后，systemd 将会自动重新加载自身的配置(相当于执行
\fBdaemon\-reload\fR
命令)，以确保所做的变更立即生效。
.sp
关于
\fB\-\-system\fR,
\fB\-\-user\fR,
\fB\-\-runtime\fR,
\fB\-\-global\fR
选项的影响， 参见前文对
\fBenable\fR
命令的解释。
.sp
注意：(1)该命令不可用于编辑远程主机上的单元文件。 (2)禁止在编辑
/etc
中的原始单元文件时使用
\fB\-\-runtime\fR
选项， 因为
/etc
中的单元文件优先级高于
/run
中的单元文件。
.RE
.PP
\fBget\-default\fR
.RS 4
显示默认的启动目标。 这将显示
default\&.target
软链接所指向的实际单元文件的名称。
.RE
.PP
\fBset\-default \fR\fB\fINAME\fR\fR
.RS 4
设置默认的启动目标。 这会将
default\&.target
软链接指向
\fINAME\fR
单元。
.RE
.SS "机器命令"
.PP
\fBlist\-machines \fR\fB[\fIPATTERN\fR\&.\&.\&.]\fR
.RS 4
列出主机和所有运行中的本地容器，以及它们的状态。 如果给出了模式(\fIPATTERN\fR)参数， 那么仅显示容器名称与至少一个模式匹配的本地容器。
.RE
.SS "任务(job)命令"
.PP
\fBlist\-jobs \fR\fB[\fIPATTERN\&.\&.\&.\fR]\fR
.RS 4
列出正在运行中的任务。 如果给出了模式(\fIPATTERN\fR)参数， 那么仅显示单元名称与至少一个模式匹配的任务。
.RE
.PP
\fBcancel \fR\fB\fIJOB\fR\fR\fB\&.\&.\&.\fR
.RS 4
据给定的任务ID撤消任务。 如果没有给出任务ID， 那么表示撤消所有尚未执行的任务。
.RE
.SS "环境变量命令"
.PP
\fBshow\-environment\fR
.RS 4
显示所有 systemd 环境变量及其值。 显示格式遵守shell脚本语法，可以直接用于shell脚本中。 这些环境变量会被传递给所有由 systemd 派生的进程。
.RE
.PP
\fBset\-environment \fR\fB\fIVARIABLE=VALUE\fR\fR\fB\&.\&.\&.\fR
.RS 4
设置指定的 systemd 环境变量。
.RE
.PP
\fBunset\-environment \fR\fB\fIVARIABLE\fR\fR\fB\&.\&.\&.\fR
.RS 4
撤消指定的 systemd 环境变量。 如果仅指定了变量名，那么表示无条件的撤消该变量(无论其值是什么)。 如果以 VARIABLE=VALUE 格式同时给出了变量值， 那么表示仅当 VARIABLE 的值恰好等于 VALUE 时， 才撤消 VARIABLE 变量。
.RE
.PP
\fBimport\-environment\fR [\fIVARIABLE\&.\&.\&.\fR]
.RS 4
导入指定的客户端环境变量。 如果未指定任何参数， 则表示导入全部客户端环境变量。
.RE
.SS "systemd 生命周期命令"
.PP
\fBdaemon\-reload\fR
.RS 4
重新加载 systemd 守护进程的配置。 具体是指：重新运行所有的生成器(\fBsystemd.generator\fR(7))， 重新加载所有单元文件，重建整个依赖关系树。 在重新加载过程中， 所有由 systemd 代为监听的用户套接字都始终保持可访问状态。
.sp
不要将此命令与
\fBreload\fR
命令混淆。
.RE
.PP
\fBdaemon\-reexec\fR
.RS 4
重新执行 systemd 守护进程。 具体是指：首先序列化 systemd 状态， 接着重新执行 systemd 守护进程并反序列化原有状态。 此命令仅供调试和升级 systemd 使用。 有时候也作为
\fBdaemon\-reload\fR
命令的重量级版本使用。 在重新执行过程中， 所有由 systemd 代为监听的用户套接字都始终保持可访问状态。
.RE
.SS "系统命令"
.PP
\fBis\-system\-running\fR
.RS 4
检查当前系统是否处于正常运行状态(running)，若正常则返回"0"，否则返回大于零的正整数。 所谓正常运行状态是指： 系统完成了全部的启动操作，整个系统已经处于完全可用的状态， 特别是没有处于启动/关闭/维护状态，并且没有任何单元处于失败(failed)状态。 除非使用了
\fB\-\-quiet\fR
选项， 否则此命令还会在标准输出上显示系统的当前状态， 如下表所示：
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&is\-system\-running 命令的输出
.TS
allbox tab(:);
lB lB lB.
T{
状态
T}:T{
含义
T}:T{
返回值
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fIinitializing\fR
T}:T{
启动的早期阶段。也就是尚未到达
basic\&.target/rescue\&.target/emergency\&.target
之前的阶段。
T}:T{
> 0
T}
T{
\fIstarting\fR
T}:T{
启动的晚期阶段。 也就是任务队列首次达到空闲之前的阶段， 或者已经启动到了某个救援 target 中。
T}:T{
> 0
T}
T{
\fIrunning\fR
T}:T{
完成了全部的启动操作，整个系统已经处于完全可用的状态， 并且没有任何单元处于失败(failed)状态。
T}:T{
0
T}
T{
\fIdegraded\fR
T}:T{
完成了全部的启动操作，系统已经可用， 但是某些单元处于失败(failed)状态。
T}:T{
> 0
T}
T{
\fImaintenance\fR
T}:T{
启动了
rescue\&.target/emergency\&.target
目标。
T}:T{
> 0
T}
T{
\fIstopping\fR
T}:T{
系统正处于关闭过程中。
T}:T{
> 0
T}
T{
\fIoffline\fR
T}:T{
整个系统已经处于完全可用的状态， 但init进程(PID=1)不是 systemd
T}:T{
> 0
T}
T{
\fIunknown\fR
T}:T{
由于资源不足或未知原因， 无法检测系统的当前状态
T}:T{
> 0
T}
.TE
.sp 1
.RE
.PP
\fBdefault\fR
.RS 4
进入默认模式。差不多相当于执行
\fBisolate default\&.target\fR
命令。
.RE
.PP
\fBrescue\fR
.RS 4
进入救援模式。差不多相当于执行
\fBisolate rescue\&.target\fR
命令。 但同时会向所有用户显示一条警告信息。
.RE
.PP
\fBemergency\fR
.RS 4
进入紧急维修模式。差不多相当于执行
\fBisolate emergency\&.target\fR
命令。 但同时会向所有用户显示一条警告信息。
.RE
.PP
\fBhalt\fR
.RS 4
关闭系统，但不切断电源。 差不多相当于执行
\fBstart halt\&.target \-\-job\-mode=replace\-irreversibly\fR
命令。 但同时会向所有用户显示一条警告信息。 若仅使用一次
\fB\-\-force\fR
选项，则跳过单元的正常停止步骤而直接杀死所有进程，强制卸载所有文件系统(或以只读模式重新挂载)，并立即关闭系统。 若使用了两次
\fB\-\-force\fR
选项，则跳过杀死进程和卸载文件系统的步骤，并立即关闭系统，这会导致数据丢失、文件系统不一致等不良后果。 注意，如果连续两次使用
\fB\-\-force\fR
选项， 那么所有操作都将由
\fBsystemctl\fR
自己直接执行，而不会与 systemd 进程通信。 这意味着，即使 systemd 进程已经僵死或者崩溃， 连续两次使用
\fB\-\-force\fR
选项所指定的操作依然能够执行成功。
.RE
.PP
\fBpoweroff\fR
.RS 4
关闭系统，同时切断电源。 差不多相当于执行
\fBstart poweroff\&.target \-\-job\-mode=replace\-irreversibly\fR
命令。 但同时会向所有用户显示一条警告信息。 若仅使用一次
\fB\-\-force\fR
选项，则跳过单元的正常停止步骤而直接杀死所有进程，强制卸载所有文件系统(或以只读模式重新挂载)，并立即关闭系统。 若使用了两次
\fB\-\-force\fR
选项，则跳过杀死进程和卸载文件系统的步骤，并立即关闭系统，这会导致数据丢失、文件系统不一致等不良后果。 注意，如果连续两次使用
\fB\-\-force\fR
选项， 那么所有操作都将由
\fBsystemctl\fR
自己直接执行，而不会与 systemd 进程通信。 这意味着，即使 systemd 进程已经僵死或者崩溃， 连续两次使用
\fB\-\-force\fR
选项所指定的操作依然能够执行成功。
.RE
.PP
\fBreboot \fR\fB[\fIarg\fR]\fR
.RS 4
关闭系统，然后重新启动。 差不多相当于执行
\fBstart reboot\&.target \-\-job\-mode=replace\-irreversibly\fR
命令。 但同时会向所有用户显示一条警告信息。 若仅使用一次
\fB\-\-force\fR
选项，则跳过单元的正常停止步骤而直接杀死所有进程，强制卸载所有文件系统(或以只读模式重新挂载)，并立即关闭系统。 若使用了两次
\fB\-\-force\fR
选项，则跳过杀死进程和卸载文件系统的步骤，并立即关闭系统，这会导致数据丢失、文件系统不一致等不良后果。 注意，如果连续两次使用
\fB\-\-force\fR
选项， 那么所有操作都将由
\fBsystemctl\fR
自己直接执行，而不会与 systemd 进程通信。 这意味着，即使 systemd 进程已经僵死或者崩溃， 连续两次使用
\fB\-\-force\fR
选项所指定的操作依然能够执行成功。
.sp
若给出了可选的
\fIarg\fR
参数， 那么将会被作为可选参数传递给
\fBreboot\fR(2)
系统调用。 其取值范围依赖于特定的硬件平台。 例如
"recovery"
有可能表示触发系统恢复动作， 而
"fota"
有可能表示
\(lqfirmware over the air\(rq
固件更新。
.RE
.PP
\fBkexec\fR
.RS 4
关闭系统，并通过内核的 kexec 接口重新启动。 差不多相当于执行
\fBstart kexec\&.target \-\-job\-mode=replace\-irreversibly\fR
命令。 但同时会向所有用户显示一条警告信息。 若使用了
\fB\-\-force\fR
选项， 则跳过服务的正常关闭步骤而直接杀死所有进程， 强制卸载所有文件系统(或只读挂载)， 并立即关闭系统。
.RE
.PP
\fBexit \fR\fB[\fIEXIT_CODE\fR]\fR
.RS 4
让 systemd 按照指定的
\fIEXIT_CODE\fR
退出码(必须是整数)退出。 若未指定
\fIEXIT_CODE\fR
则退出码为零。
.sp
此命令相当于
\fBpoweroff\fR
命令， 但仅可用于用户实例(也就是以
\fB\-\-user\fR
选项启动的实例)或容器， 否则会执行失败。
.RE
.PP
\fBswitch\-root \fR\fB\fIROOT\fR\fR\fB \fR\fB[\fIINIT\fR]\fR
.RS 4
将系统的根目录切换到
\fIROOT\fR
并执行新的
\fIINIT\fR
程序(PID=1)。 此命令仅应该在初始内存盘("initrd")中使用。 如果未指定
\fIINIT\fR
参数， 那么表示自动在
\fIROOT\fR
目录下搜索 systemd 二进制程序， 并用作
\fIINIT\fR
程序， 同时"initrd"中 systemd 的状态将会传递给新的 systemd 进程， 从而允许在新系统中对原"initrd"中的各种服务状态进行内省。
.RE
.PP
\fBsuspend\fR
.RS 4
休眠到内存。 相当于启动
suspend\&.target
目标。
.RE
.PP
\fBhibernate\fR
.RS 4
休眠到硬盘。 相当于启动
hibernate\&.target
目标。
.RE
.PP
\fBhybrid\-sleep\fR
.RS 4
进入混合休眠模式。 也就是同时休眠到内存和硬盘。 相当于启动
hybrid\-sleep\&.target
目标。
.RE
.SS "参数语法"
.PP
单元命令的参数可能是一个单独的单元名称(\fINAME\fR)， 也可能是多个匹配模式(\fIPATTERN\fR\&.\&.\&.)。 对于第一种情况，如果省略单元名称的后缀，那么默认以
"\&.service"
为后缀， 除非那个命令只能用于某种特定类型的单元。例如
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl start sshd
.fi
.if n \{\
.RE
.\}
.sp
等价于
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl start sshd\&.service
.fi
.if n \{\
.RE
.\}
.sp
， 而
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl isolate default
.fi
.if n \{\
.RE
.\}
.sp
等价于
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl isolate default\&.target
.fi
.if n \{\
.RE
.\}
.sp
，因为 isolate 命令只能用于 \&.target 单元。 注意，设备文件路径(绝对路径)会自动转化为 device 单元名称，其他路径(绝对路径)会自动转化为 mount 单元名称。 例如，如下命令
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl status /dev/sda
# systemctl status /home
.fi
.if n \{\
.RE
.\}
.sp
分别等价于
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl status dev\-sda\&.device
# systemctl status home\&.mount
.fi
.if n \{\
.RE
.\}
.sp
对于第二种情况，可以在模式中使用shell风格的匹配符，对所有已加载单元的主名称(primary name)进行匹配。 如果没有使用匹配符并且省略了单元后缀，那么处理方式与第一种情况完全相同。 这就意味着：如果没有使用匹配符，那么该模式就等价于一个单独的单元名称(\fINAME\fR)，只表示一个明确的单元。 如果使用了匹配符，那么该模式就可以匹配任意数量的单元(包括零个)。
.PP
模式使用
\fBfnmatch\fR(3)
语法， 也就是可以使用shell风格的
"*",
"?",
"[]"
匹配符(详见
\fBglob\fR(7))。 模式将基于所有已加载单元的主名称(primary name)进行匹配， 如果某个模式未能匹配到任何单元，那么将会被悄无声息的忽略掉。 例如
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl stop sshd@*\&.service
.fi
.if n \{\
.RE
.\}
.sp
命令将会停止所有
sshd@\&.service
的实例单元。 注意，单元的别名(软连接)以及未被加载的单元，不在匹配范围内(也就是不作为匹配目标)。
.PP
对于单元文件命令，\fINAME\fR
参数必须是单元名称(完整的全称或省略了后缀的简称)或单元文件的绝对路径。 例如：
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl enable foo\&.service
.fi
.if n \{\
.RE
.\}
.sp
或
.sp
.if n \{\
.RS 4
.\}
.nf
# systemctl link /path/to/foo\&.service
.fi
.if n \{\
.RE
.\}
.sp
.SH "退出状态"
.PP
返回值为 0 表示成功， 非零返回值表示失败代码。
.SH "环境变量"
.PP
\fI$SYSTEMD_EDITOR\fR
.RS 4
编辑单元文件时所使用的编辑器，会覆盖
\fI$EDITOR\fR
与
\fI$VISUAL\fR
的值。 如果
\fI$SYSTEMD_EDITOR\fR,
\fI$EDITOR\fR,
\fI$VISUAL\fR
都不存在或无法使用， 那么将会依次尝试使用
\fBeditor\fR(1),
\fBnano\fR(1),
\fBvim\fR(1),
\fBvi\fR(1)
编辑器。
.RE
.PP
\fI$SYSTEMD_PAGER\fR
.RS 4
指定分页程序。仅在未指定
\fB\-\-no\-pager\fR
选项时有意义。 此变量会覆盖
\fI$PAGER\fR
的值。 将此变量设为空字符串或
"cat"
等价于使用
\fB\-\-no\-pager\fR
选项。
.RE
.PP
\fI$SYSTEMD_LESS\fR
.RS 4
用于覆盖 默认传递给
\fBless\fR
程序的命令行选项 ("FRSXMK")。
.RE
.SH "参见"
.PP
\fBsystemd\fR(1),
\fBjournalctl\fR(1),
\fBloginctl\fR(1),
\fBmachinectl\fR(1),
\fBsystemd.unit\fR(5),
\fBsystemd.resource-control\fR(5),
\fBsystemd.special\fR(7),
\fBwall\fR(1),
\fBsystemd.preset\fR(5),
\fBsystemd.generator\fR(7),
\fBglob\fR(7)
.SH "NOTES"
.IP " 1." 4
Preset
.RS 4
\%http://freedesktop.org/wiki/Software/systemd/Preset
.RE
.\" manpages-zh translator: 金步国
.\" manpages-zh comment: 金步国作品集：http://www.jinbuguo.com
